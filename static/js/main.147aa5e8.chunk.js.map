{"version":3,"sources":["Components/Indicators/Indicator.js","Components/Indicators/LineIndicator.js","Components/Grid/Cell.js","Components/Grid/Line.js","Components/Grid/GridInside.js","Components/Grid/Grid.js","Components/Score/ScoreRow.js","Components/Controls/ControlRow.js","Components/Controls/MemoValueButton.js","Components/Controls/MemoRow.js","Components/Title.js","Components/Game.js","serviceWorker.js","index.js"],"names":["Indicator","className","this","props","data","coefficients","mines","React","Component","LineIndicator","Row","grid","columnsIterator","map","column","index","getGroupIndications","key","Cell","playing","cell","covered","memoSelected","memoMode","onMemoSelected","uncover","forceUpdate","onClick","cellClicked","bind","mine","value","memo","empty","getSortedArray","elt","cellId","defaultProps","Line","line","lineNumber","cellForMemo","indicator","width","length","GridInside","linesIterator","onCellClick","Grid","ScoreRow","Col","game","score","ControlRow","ButtonGroup","Button","color","won","onStop","disabled","lost","nextLevel","onGridChange","MemoValueButton","toggle","onMemoValue","console","log","has","enabled","buttonClicked","active","children","MemoRow","state","memoEnabled","setState","onMemoToggle","_","times","maximalCoefficient","selectedCellForMemo","toggleMemo","role","aria-label","Title","level","Game","args","endedGrid","interrupt","gotoNextLevel","localStorage","setItem","Container","memoCellSelected","gridStopped","changeGrid","memoValue","memoToggled","VoltorbFlip","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","tempLevel","getItem","startingLevel","Number","isSafeInteger","tempScore","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.147aa5e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Indicator extends React.Component {\r\n  static propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={\"indication col text-center abstract-cell\"}>\r\n        <div className={\"indication-top d-flex justify-content-center\"}>\r\n          <div className=\"align-self-center\">\r\n            {this.props.data.coefficients}\r\n          </div>\r\n        </div>\r\n        <div className=\"indication-bottom d-flex justify-content-center\">\r\n          <span className=\"align-self-center\">\r\n            {this.props.data.mines}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid } from '@dracoctix/voltorb-flip';\r\nimport { Row } from 'reactstrap';\r\n\r\nimport Indicator from './Indicator.js';\r\n\r\nexport default class LineIndicator extends React.Component {\r\n  static propTypes = {\r\n    grid: PropTypes.instanceOf(Grid).isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        {[...this.props.grid.columnsIterator()].map((column, index) => (\r\n          (<Indicator data={this.props.grid.getGroupIndications(column)} key={`indicator-column-${index}`} />)\r\n        ))}\r\n        <div className=\"col abstract-cell\"/>\r\n      </Row>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Cell as CellLogic } from '@dracoctix/voltorb-flip';\r\n\r\nexport default class Cell extends React.Component {\r\n  static propTypes = {\r\n    cell: PropTypes.instanceOf(CellLogic).isRequired,\r\n    onClick: PropTypes.func,\r\n    onMemoSelected: PropTypes.func,\r\n    playing: PropTypes.bool.isRequired,\r\n    memoMode: PropTypes.bool,\r\n    memoSelected: PropTypes.bool,\r\n    cellId: PropTypes.string,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onClick: () => {},\r\n    memoMode: false,\r\n    memoSelected: false,\r\n  };\r\n\r\n  cellClicked() {\r\n    if (this.props.playing && this.props.cell.covered) {\r\n      if (!this.props.memoSelected && this.props.memoMode) {\r\n        this.props.onMemoSelected(this.props.cell);\r\n      } else if (!this.props.memoMode) {\r\n        this.props.cell.uncover();\r\n        this.forceUpdate();\r\n        this.props.onClick(this.props.cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className={`${this.props.memoMode ? `cell-memo-mode ${this.props.memoSelected ? 'cell-memo-selected ' : ''}` : ''}col abstract-cell text-center cell d-flex justify-content-center ${(this.props.cell.covered && this.props.playing) ? 'cell-covered' : 'cell-uncovered'}`} onClick={this.cellClicked.bind(this)}>\r\n          <div className=\"align-self-center cell-content\">\r\n            {this.props.cell.covered ? '❓' : (this.props.cell.mine) ? '💣' : this.props.cell.value }\r\n          </div>\r\n          {!this.props.cell.memo.empty && (<div className=\"cell-memo-data\">\r\n            {this.props.cell.memo.getSortedArray().map((elt, index) => (\r\n              <span className=\"my-auto\" key={`memo-${this.props.cellId}-${index}`}>\r\n                {elt === 0 ? '💣' : elt}\r\n              </span>\r\n            ))}\r\n          </div>)}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Cell as CellLogic } from '@dracoctix/voltorb-flip';\r\nimport Indicator from '../Indicators/Indicator.js'\r\nimport { Row } from 'reactstrap';\r\nimport Cell from './Cell.js';\r\n\r\nexport default class Line extends React.Component {\r\n  static propTypes = {\r\n    line: PropTypes.arrayOf(PropTypes.instanceOf(CellLogic)).isRequired,\r\n    indicator: PropTypes.object.isRequired,\r\n    onClick: PropTypes.func,\r\n    lineNumber: PropTypes.number.isRequired,\r\n    playing: PropTypes.bool.isRequired,\r\n    memoMode: PropTypes.bool,\r\n    cellForMemo: PropTypes.instanceOf(CellLogic),\r\n    onMemoSelected: PropTypes.func,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onClick: () => {},\r\n    onMemoSelected: () => {},\r\n    memoMode: false,\r\n    cellForMemo: null,\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        {this.props.line.map((elt, key) => (<Cell cellId={`${this.props.lineNumber}-${key}`} cell={elt} key={`line-${this.props.lineNumber}-${key}`} playing={this.props.playing} onClick={this.props.onClick} memoMode={this.props.memoMode} memoSelected={this.props.cellForMemo === elt} onMemoSelected={this.props.onMemoSelected} />))}\r\n        <Indicator data={this.props.indicator} width={100 / (this.props.line.length + 1)} />\r\n      </Row>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, Cell } from '@dracoctix/voltorb-flip'\r\n\r\nimport Line from './Line.js';\r\n\r\nexport default class GridInside extends React.Component {\r\n  static propTypes = {\r\n    grid: PropTypes.instanceOf(Grid).isRequired,\r\n    onCellClick: PropTypes.func,\r\n    memoMode: PropTypes.bool,\r\n    cellForMemo: PropTypes.instanceOf(Cell),\r\n    onMemoSelected: PropTypes.func,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onCellClick: () => {},\r\n    onMemoSelected: () => {},\r\n    memoMode: false,\r\n    cellForMemo: null,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      [...this.props.grid.linesIterator()].map((line, key) => (<Line indicator={this.props.grid.getGroupIndications(line)} playing={this.props.grid.playing} lineNumber={key} onClick={this.props.onCellClick} line={line} key={`line-${key}`} memoMode={this.props.memoMode} cellForMemo={this.props.cellForMemo} onMemoSelected={this.props.onMemoSelected} />))\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid as GridLogic, Cell } from '@dracoctix/voltorb-flip';\r\n\r\nimport LineIndicator from '../Indicators/LineIndicator.js';\r\nimport GridInside from './GridInside.js';\r\n\r\nexport default class Grid extends Component {\r\n  static propTypes = {\r\n    grid: PropTypes.instanceOf(GridLogic).isRequired,\r\n    onCellClick: PropTypes.func,\r\n    memoMode: PropTypes.bool,\r\n    cellForMemo: PropTypes.instanceOf(Cell),\r\n    onMemoSelected: PropTypes.func,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onCellClick: () => {},\r\n    memoMode: false,\r\n    cellForMemo: null,\r\n    onMemoSelected: () => {},\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <LineIndicator grid={this.props.grid} />\r\n        <GridInside grid={this.props.grid} onCellClick={this.props.onCellClick} memoMode={this.props.memoMode} cellForMemo={this.props.cellForMemo} onMemoSelected={this.props.onMemoSelected} />\r\n      </>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Game from '@dracoctix/voltorb-flip';\r\nimport {Row, Col} from 'reactstrap';\r\n\r\nexport default class ScoreRow extends React.Component {\r\n  static propTypes = {\r\n    game: PropTypes.instanceOf(Game).isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Row className={\"score-row\"}>\r\n        <Col className=\"text-center\">Score for the game: <strong>{this.props.game.score} pts</strong></Col>\r\n        <Col className=\"text-center\">Score for the grid: <strong>{this.props.game.grid.score} pts</strong></Col>\r\n      </Row>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Row, ButtonGroup } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport Game from '@dracoctix/voltorb-flip';\r\n\r\nexport default class ControlRow extends React.Component {\r\n  static propTypes = {\r\n    onStop: PropTypes.func,\r\n    onGridChange: PropTypes.func,\r\n    game: PropTypes.instanceOf(Game).isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onStop: () => {},\r\n    onGridChange: () => {},\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <ButtonGroup className=\"col-12\">\r\n          <Button color={this.props.game.grid.playing ? 'danger' : (this.props.game.grid.won ? 'success' : 'danger')} className=\"col-6\" onClick={this.props.onStop} disabled={!this.props.game.grid.playing}>{this.props.game.grid.playing ? 'Stop the grid here to keep points.' : (this.props.game.grid.won ? 'You found all points of the grid.' : (this.props.game.grid.lost ? `You found a mine and will return to level ${this.props.game.nextLevel}` : `You interrupted the grid, you will start over from the same level.`))}</Button>\r\n          <Button color=\"success\" onClick={this.props.onGridChange} disabled={this.props.game.grid.playing} className=\"col-6\">{this.props.game.grid.playing ? 'Game in progress...' : `Go to next grid (level ${this.props.game.nextLevel})${this.props.game.grid.score ? ' and earn points' : ''}.`}</Button>\r\n        </ButtonGroup>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport { Cell } from '@dracoctix/voltorb-flip';\r\n\r\nexport default class MemoValueButton extends React.Component {\r\n  static propTypes = {\r\n    onMemoValue: PropTypes.func,\r\n    enabled: PropTypes.bool,\r\n    cell: PropTypes.instanceOf(Cell),\r\n  };\r\n\r\n  static defaultProps = {\r\n    onMemoValue: () => {},\r\n    enabled: true,\r\n    cell: null,\r\n  };\r\n\r\n  buttonClicked() {\r\n    this.props.cell.memo.toggle(this.props.value);\r\n    this.props.onMemoValue(this.props.cell.memo);\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.cell?.memo.has(this.props.value));\r\n    return (\r\n      <Button color=\"primary\" disabled={!this.props.enabled} onClick={this.buttonClicked.bind(this)} active={this.props.enabled && this.props.cell && this.props.cell.memo.has(this.props.value)}>{this.props.children}</Button>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { ButtonGroup, Row, Button } from 'reactstrap';\r\nimport Game, { Cell } from '@dracoctix/voltorb-flip';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport MemoValueButton from './MemoValueButton.js'\r\n\r\nexport default class MemoRow extends React.Component {\r\n  static propTypes = {\r\n    game: PropTypes.instanceOf(Game).isRequired,\r\n    selectedCellForMemo: PropTypes.instanceOf(Cell),\r\n    onMemoToggle: PropTypes.func,\r\n    onMemoValue: PropTypes.func,\r\n  }\r\n\r\n  static defaultProps = {\r\n    selectedCellForMemo: null,\r\n    onMemoToggle: () => {},\r\n    onMemoValue: () => {},\r\n  };\r\n\r\n  constructor(...props) {\r\n    super(...props);\r\n\r\n    this.state = {\r\n      memoEnabled: false,\r\n    };\r\n  }\r\n\r\n  toggleMemo() {\r\n    const memoEnabled = !this.state.memoEnabled;\r\n    this.setState({\r\n      memoEnabled\r\n    });\r\n    this.props.onMemoToggle(memoEnabled);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row className=\"mt-3\">\r\n        <ButtonGroup className=\"col-10\">\r\n          {_.times(this.props.game.maximalCoefficient + 1, (index) => (<MemoValueButton enabled={!!(this.props.game.grid.playing && this.state.memoEnabled && this.props.selectedCellForMemo)} value={index} cell={this.props.selectedCellForMemo} key={`memo-btn-${index}`} onMemoValue={this.props.onMemoValue}>{index === 0 ? '💣' : index}</MemoValueButton>))}\r\n        </ButtonGroup>\r\n        <ButtonGroup className=\"col-2\">\r\n          <Button color=\"primary\" disabled={!this.props.game.grid.playing} active={this.state.memoEnabled} onClick={this.toggleMemo.bind(this)}>\r\n            <span role=\"img\" aria-label=\"Mémo\">📝</span>\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Row>\r\n    )\r\n  }\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Game from '@dracoctix/voltorb-flip';\r\nimport { Row } from 'reactstrap';\r\n\r\nexport default class Title extends React.Component {\r\n  static propTypes = {\r\n    game: PropTypes.instanceOf(Game).isRequired,\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <h1 className={\"col text-center\"}>Voltorb Flip (Level {this.props.game.level})</h1>\r\n      </Row>);\r\n  }\r\n}\r\n","import VoltorbFlip from '@dracoctix/voltorb-flip';\r\nimport PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport Grid from './Grid/Grid.js';\r\nimport ScoreRow from './Score/ScoreRow.js';\r\nimport ControlRow from './Controls/ControlRow.js';\r\nimport MemoRow from './Controls/MemoRow.js';\r\nimport Title from './Title';\r\n\r\nexport default class Game extends Component {\r\n  static propTypes = {\r\n    game: PropTypes.instanceOf(VoltorbFlip),\r\n  };\r\n\r\n  static defaultProps = {\r\n    game: new VoltorbFlip(),\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.state = {\r\n      grid: this.props.game.grid,\r\n      game: this.props.game,\r\n      selectedCellForMemo: null,\r\n      memoMode: false,\r\n    };\r\n  }\r\n\r\n  updateGridState() {\r\n    this.setState({\r\n      grid: this.props.game.grid\r\n    });\r\n  }\r\n\r\n  cellClicked(cell) {\r\n    this.setState({\r\n      game: this.props.game,\r\n    });\r\n    if (!this.state.grid.playing) {\r\n      this.endedGrid();\r\n    }\r\n  }\r\n\r\n  endedGrid() {\r\n    this.forceUpdate();\r\n    this.setState({\r\n      memoMode: false,\r\n      selectedCellForMemo: null,\r\n    });\r\n  }\r\n\r\n  gridStopped() {\r\n    this.state.game.grid.interrupt();\r\n    this.endedGrid();\r\n  }\r\n\r\n  changeGrid() {\r\n    this.setState({\r\n      grid: this.state.game.gotoNextLevel(),\r\n    });\r\n\r\n    localStorage.setItem('score', this.props.game.score);\r\n    localStorage.setItem('level', this.props.game.level);\r\n  }\r\n\r\n  memoToggled() {\r\n    const memoMode = !this.state.memoMode;\r\n    const selectedCellForMemo = this.state.memoMode ? this.state.selectedCellForMemo : null;\r\n    this.setState({memoMode, selectedCellForMemo});\r\n  }\r\n\r\n  memoValue() {\r\n    this.setState({ selectedCellForMemo: this.state.selectedCellForMemo });\r\n  }\r\n\r\n  memoCellSelected(cell) {\r\n    this.setState({\r\n      selectedCellForMemo: cell,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <Container>\r\n      <Title game={this.state.game} />\r\n      <Grid grid={this.state.grid} memoMode={this.state.memoMode} onMemoSelected={this.memoCellSelected.bind(this)} cellForMemo={this.state.selectedCellForMemo} onCellClick={this.cellClicked.bind(this)}/>\r\n      <ScoreRow game={this.state.game} />\r\n      <ControlRow game={this.state.game} onStop={this.gridStopped.bind(this)} onGridChange={this.changeGrid.bind(this)} />\r\n      <MemoRow selectedCellForMemo={this.state.selectedCellForMemo} game={this.state.game} onMemoValue={this.memoValue.bind(this)} onMemoToggle={this.memoToggled.bind(this)} />\r\n    </Container>\r\n    );\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './Components/Game';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport VoltorbFlip from '@dracoctix/voltorb-flip';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst tempLevel = localStorage.getItem('level');\r\nconst startingLevel = (tempLevel && Number.isSafeInteger(+tempLevel) && +tempLevel <= 8 && +tempLevel > 0) ? +tempLevel : 1;\r\nconst tempScore = localStorage.getItem('score');\r\nconst score = (tempScore && Number.isSafeInteger(+tempScore) && +tempScore >= 0) ? +tempScore : 0;\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game game={new VoltorbFlip({\r\n      startingLevel,\r\n      score,\r\n    })} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}