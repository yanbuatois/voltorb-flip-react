{"version":3,"sources":["Components/Indicators/Indicator.js","Components/Indicators/LineIndicator.js","Components/Grid/Cell.js","Components/Grid/Line.js","Components/Grid/GridInside.js","Components/Grid/Grid.js","Components/Score/ScoreRow.js","Components/Controls/ControlRow.js","Components/Title.js","Components/Game.js","serviceWorker.js","index.js"],"names":["Indicator","className","this","props","data","coefficients","mines","React","Component","LineIndicator","Row","grid","columnsIterator","map","column","index","getGroupIndications","key","Cell","playing","cell","uncover","forceUpdate","onClick","covered","cellClicked","bind","mine","value","defaultProps","Line","line","elt","lineNumber","indicator","width","length","GridInside","linesIterator","onCellClick","Grid","ScoreRow","Col","game","score","ControlRow","ButtonGroup","Button","color","won","onStop","disabled","lost","nextLevel","onGridChange","Title","level","Game","args","state","setState","interrupt","gotoNextLevel","Container","gridStopped","changeGrid","VoltorbFlip","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b8c1b739.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Indicator extends React.Component {\r\n  static propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={\"indication col text-center abstract-cell\"}>\r\n        <div className={\"indication-top d-flex justify-content-center\"}>\r\n          <div className=\"align-self-center\">\r\n            {this.props.data.coefficients}\r\n          </div>\r\n        </div>\r\n        <div className=\"indication-bottom d-flex justify-content-center\">\r\n          <span className=\"align-self-center\">\r\n            {this.props.data.mines}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid } from '@dracoctix/voltorb-flip';\r\nimport { Row } from 'reactstrap';\r\n\r\nimport Indicator from './Indicator.js';\r\n\r\nexport default class LineIndicator extends React.Component {\r\n  static propTypes = {\r\n    grid: PropTypes.instanceOf(Grid).isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        {[...this.props.grid.columnsIterator()].map((column, index) => (\r\n          (<Indicator data={this.props.grid.getGroupIndications(column)} key={`indicator-column-${index}`} />)\r\n        ))}\r\n        <div className=\"col abstract-cell\"/>\r\n      </Row>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Cell as CellLogic } from '@dracoctix/voltorb-flip';\r\n\r\nexport default class Cell extends React.Component {\r\n  static propTypes = {\r\n    cell: PropTypes.instanceOf(CellLogic).isRequired,\r\n    onClick: PropTypes.func,\r\n    playing: PropTypes.bool,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onClick: () => {},\r\n  };\r\n\r\n  cellClicked() {\r\n    if (this.props.playing) {\r\n      this.props.cell.uncover();\r\n      this.forceUpdate();\r\n      this.props.onClick(this.props.cell);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`col abstract-cell text-center cell d-flex justify-content-center ${(this.props.cell.covered && this.props.playing) ? 'cell-covered' : 'cell-uncovered'}`} onClick={this.cellClicked.bind(this)}>\r\n        <div className=\"align-self-center cell-content\">\r\n          {this.props.cell.covered ? '‚ùì' : (this.props.cell.mine) ? 'üí£' : this.props.cell.value }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Cell as CellLogic } from '@dracoctix/voltorb-flip';\r\nimport Indicator from '../Indicators/Indicator.js'\r\nimport { Row } from 'reactstrap';\r\nimport Cell from './Cell.js';\r\n\r\nexport default class Line extends React.Component {\r\n  static propTypes = {\r\n    line: PropTypes.arrayOf(PropTypes.instanceOf(CellLogic)).isRequired,\r\n    indicator: PropTypes.object.isRequired,\r\n    onClick: PropTypes.func,\r\n    lineNumber: PropTypes.number.isRequired,\r\n    playing: PropTypes.bool.isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onClick: () => {},\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        {this.props.line.map((elt, key) => (<Cell cell={elt} key={`line-${this.props.lineNumber}-${key}`} playing={this.props.playing} onClick={this.props.onClick} />))}\r\n        <Indicator data={this.props.indicator} width={100 / (this.props.line.length + 1)} />\r\n      </Row>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid } from '@dracoctix/voltorb-flip';\r\n\r\nimport Line from './Line.js';\r\n\r\nexport default class GridInside extends React.Component {\r\n  static propTypes = {\r\n    grid: PropTypes.instanceOf(Grid).isRequired,\r\n    onCellClick: PropTypes.func,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onCellClick: () => {},\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      [...this.props.grid.linesIterator()].map((line, key) => (<Line indicator={this.props.grid.getGroupIndications(line)} playing={this.props.grid.playing} lineNumber={key} onClick={this.props.onCellClick} line={line} key={`line-${key}`} />))\r\n    )\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid as GridLogic } from '@dracoctix/voltorb-flip';\r\n\r\nimport LineIndicator from '../Indicators/LineIndicator.js';\r\nimport GridInside from './GridInside.js';\r\n\r\nexport default class Grid extends Component {\r\n  static propTypes = {\r\n    grid: PropTypes.instanceOf(GridLogic).isRequired,\r\n    onCellClick: PropTypes.func,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onCellClick: () => {},\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <LineIndicator grid={this.props.grid} />\r\n        <GridInside grid={this.props.grid} onCellClick={this.props.onCellClick} />\r\n      </>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Game from '@dracoctix/voltorb-flip';\r\nimport {Row, Col} from 'reactstrap';\r\n\r\nexport default class ScoreRow extends React.Component {\r\n  static propTypes = {\r\n    game: PropTypes.instanceOf(Game).isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Row className={\"score-row\"}>\r\n        <Col className=\"text-center\">Score for the game: <strong>{this.props.game.score} pts</strong></Col>\r\n        <Col className=\"text-center\">Score for the grid: <strong>{this.props.game.grid.score} pts</strong></Col>\r\n      </Row>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Row, ButtonGroup } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport Game from '@dracoctix/voltorb-flip';\r\n\r\nexport default class ControlRow extends React.Component {\r\n  static propTypes = {\r\n    onStop: PropTypes.func,\r\n    onGridChange: PropTypes.func,\r\n    game: PropTypes.instanceOf(Game).isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onStop: () => {},\r\n    onGridChange: () => {},\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <ButtonGroup className=\"col-12\">\r\n          <Button color={this.props.game.grid.playing ? 'danger' : (this.props.game.grid.won ? 'success' : 'danger')} className=\"col-6\" onClick={this.props.onStop} disabled={!this.props.game.grid.playing}>{this.props.game.grid.playing ? 'Stop the grid here to keep points.' : (this.props.game.grid.won ? 'You found all points of the grid.' : (this.props.game.grid.lost ? `You found a mine and will return to level ${this.props.game.nextLevel}` : `You interrupted the grid, you will start over from the same level.`))}</Button>\r\n          <Button color=\"success\" onClick={this.props.onGridChange} disabled={this.props.game.grid.playing} className=\"col-6\">{this.props.game.grid.playing ? 'Game in progress...' : `Go to next grid (level ${this.props.game.nextLevel})${this.props.game.grid.score ? ' and earn points' : ''}.`}</Button>\r\n        </ButtonGroup>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Game from '@dracoctix/voltorb-flip';\r\nimport { Row } from 'reactstrap';\r\n\r\nexport default class Title extends React.Component {\r\n  static propTypes = {\r\n    game: PropTypes.instanceOf(Game).isRequired,\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <h1 className={\"col text-center\"}>Voltorb Flip (Level {this.props.game.level})</h1>\r\n      </Row>);\r\n  }\r\n}\r\n","import VoltorbFlip from '@dracoctix/voltorb-flip';\r\nimport PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport Grid from './Grid/Grid.js';\r\nimport ScoreRow from './Score/ScoreRow.js';\r\nimport ControlRow from './Controls/ControlRow.js';\r\nimport Title from './Title';\r\n\r\nexport default class Game extends Component {\r\n  static propTypes = {\r\n    game: PropTypes.instanceOf(VoltorbFlip),\r\n  };\r\n\r\n  static defaultProps = {\r\n    game: new VoltorbFlip(),\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.state = {\r\n      grid: this.props.game.grid,\r\n      game: this.props.game,\r\n    };\r\n  }\r\n\r\n  updateGridState() {\r\n    this.setState({\r\n      grid: this.props.game.grid\r\n    });\r\n  }\r\n\r\n  cellClicked(cell) {\r\n    this.setState({\r\n      game: this.props.game,\r\n    });\r\n    if (!this.state.grid.playing) {\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  gridStopped() {\r\n    this.state.game.grid.interrupt();\r\n    this.forceUpdate();\r\n  }\r\n\r\n  changeGrid() {\r\n\r\n    this.setState({\r\n      grid: this.state.game.gotoNextLevel(),\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <Container>\r\n      <Title game={this.state.game} />\r\n      <Grid grid={this.state.grid} onCellClick={this.cellClicked.bind(this)}/>\r\n      <ScoreRow game={this.state.game} />\r\n      <ControlRow game={this.state.game} onStop={this.gridStopped.bind(this)} onGridChange={this.changeGrid.bind(this)} />\r\n    </Container>\r\n    );\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './Components/Game';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}